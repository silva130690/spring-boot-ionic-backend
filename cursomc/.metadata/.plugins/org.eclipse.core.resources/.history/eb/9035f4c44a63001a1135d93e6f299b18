package com.alex.silva.cursomc.services.validation;

import javax.validation.ConstraintValidator;

import com.alex.silva.cursomc.domain.enums.TipoCliente;
import com.alex.silva.cursomc.dto.ClienteNewDTO;
import com.alex.silva.cursomc.resources.Exception.FieldMessage;
import com.alex.silva.cursomc.services.validation.utils.BR;

import java.util.ArrayList;
import java.util.List;
import javax.validation.ConstraintValidatorContext;

public class ClienteInsertValidator implements ConstraintValidator<ClienteInsert,ClienteNewDTO> {
	
	@Override
	public void initialize(ClienteInsert ann){
		
	}
	@Override
	public boolean isValid(ClienteNewDTO objDto,ConstraintValidatorContext context){
		List<FieldMessage>list =new ArrayList<>();
		
		if(objDto.getTipo().equals(TipoCliente.PESSOAJURIDICA.getCod()) && !BR.isValidCPF(objDto.getCpfOuCnpj())) {
		 list.add(new FieldMessage("cpfOuCnpj","CNPJ Inválido"));	
		}
		
		if(objDto.getTipo().equals(TipoCliente.PESSOAFISICA.getCod()) && !BR.isValidCPF(objDto.getCpfOuCnpj())) {
			 list.add(new FieldMessage("cpfOuCnpj","CPF Inválido"));	
			}
	// inclua os testes aqui, inserindo erros na lista
	for(FieldMessage e:list){
		context.disableDefaultConstraintViolation();
		context.buildConstraintViolationWithTemplate(e.getMensagem()).addPropertyNode(e.getFieldName())
		.addConstraintViolation();
		
	   }
	   return list.isEmpty();	 
	}
}	